#include <iostream>

using namespace std;

// C++中可以使用 static 关键字来吧类成员定义为静态。

// 静态成员
// 类的静态成员变量只有一个值（只被初始化一次），无论类的对象个数
// 静态成员在类的所有对象中是共享的
// 在创建第一个对象时，所有的静态数据都会被初始化为零。
// 静态成员变量要在类的外部定义（即为分配内存）与初始化（赋值），不能放在类的定义中，
// 使用范围解析运算符（::）重新声明静态变量，从而对它进行初始化。
// 可以用来监控构造函数与析构函数的运行情况。

// 静态成员函数
// 在类对象不存在的情况下也能被调用，静态函数只要使用类名加范围解析运算符（::）就可以访问。
// 只能访问静态成员数据、其他静态成员函数和类外部的其他函数
// 静态成员函数有一个类范围，不能访问类的 this 指针
// 可以使用静态成员函数来判断类的某些对象是否被创建

// 类中特殊成员变量的初始化问题
// 常量变量：必须通过构造函数参数列表进行初始化。
// 引用变量：必须通过构造函数参数列表进行初始化。
// 普通静态变量：要在类外通过"::"初始化。
// 静态整型常量：可以直接在定义的时候初始化。
// 静态非整型常量：不能直接在定义的时候初始化。要在类外通过"::"初始化。

class Box
{
public:
    // 静态成员变量
    static int objectCount;
    // 构造函数定义
    Box(double l = 2.0, double b = 2.0, double h = 2.0)
    {
        cout << "构造函数被引用" << endl;
        length = l;
        breadth = b;
        height = h;
        // 每次创建对象时加 1
        objectCount++;
    }
    // 静态成员函数
    static int getCount()
    {
        return objectCount;
    }

private:
    double length;
    double breadth;
    double height;
};

// 初始化类Box的静态成员
int Box::objectCount = 0;

int main()
{
    // 在创建对象之前输出对象的总数
    cout << "合计创建了 " << Box::getCount << " 个" << endl;
    Box box1;                // 默认构造函数（最后被重写）
    Box box2();              // 默认无参数列表构造函数
    Box box3(1.2, 3.4, 5.6); // 默认有参数列表构造函数

    // 输出对象的总数
    cout << "合计创建了 " << Box::objectCount << " 个" << endl;

    return 0;
}