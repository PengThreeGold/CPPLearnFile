// 内联函数

/*
 * 1、通常与类一起使用，如果函数内联，
 * 则编译时会复制到各个调用该函数的地方。
 * 2、对内联函数进行任何修改，都需要重新编译函数的所有客户端，
 * 因为编译器需要重新更换一次所有的代码，否则将会继续使用旧函数。
 * 3、在调用内联函数之前需要对函数进行定义，
 * 如果已定义的函数多余一行，编译器会忽略inline限定符。
 * 4、在类定义中的定义的函数都是内联函数，即使没有使用inline限定符。
 */

/*
 * Q: 引入内联函数inline的目的?
 * A: 解决程序中函数调用的效率问题。
 * 程序在编译器编译的时候，
 * 编译器将程序中出现的内联函数的调用表达式用内联函数体进行替换；
 * 对于其他函数，都是在运行时候才被替代。
 * 是一种牺牲空间代价换时间代价的使用方式，所以内联函数都是行数较少的小函数。
 * 1、内联函数中不允许出现循环语句与开关语句；
 * 2、内联函数的定义必须出现在内联函数调用之前；
 * 3、类结构中所在的类说明内部定义的函数是内联函数；
 */

#include <iostream>

using namespace std;

inline int Max(int x, int y)
{
    return (x > y) ? x : y;
}

// 程序的主函数
int main()
{
    cout << "Max (20, 10) : " << Max(20, 10) << endl;

    return 0;
}